table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}
th, td {
  border: 1px solid black;
  padding: 8px;
  text-align: left;
}
th {
  background-color: #f2f2f2;
}
@media (max-width: 600px) {
  table, thead, tbody, th, td, tr {
      display: block;
  }
  thead tr {
      position: absolute;
      top: -9999px;
      left: -9999px;
  }
  tr {
      margin-bottom: 15px;
  }
  td {
      border: none;
      position: relative;
      padding-left: 50%;
  }
  td:before {
      position: absolute;
      top: 6px;
      left: 6px;
      width: 45%;
      padding-right: 10px;
      white-space: nowrap;
  }
  td:nth-of-type(1):before { content: "Company: "; }
  td:nth-of-type(2):before { content: "Contact: "; }
  td:nth-of-type(3):before { content: "Country: "; }
}

/* The provided CSS code and the associated search results offer insights into creating a responsive and visually appealing table using CSS. Let's break down the CSS code and its implications:

1. **Table Styling**:
   - `table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }`: This rule sets the width of the table to 100% of its containing element, collapses the borders of the table cells, and adds a margin at the bottom of the table.
   - `th, td { border: 1px solid black; padding: 8px; text-align: left; }`: This rule applies a 1px solid black border, 8px padding, and left-aligned text to both the table header cells (th) and table data cells (td).
   - `th { background-color: #f2f2f2; }`: This rule sets the background color of the table header cells to a light gray (#f2f2f2).

2. **Responsive Design**:
   - `@media (max-width: 600px) { ... }`: This media query targets screens with a maximum width of 600px, indicating that the following CSS rules apply when the screen size is smaller, typically for mobile devices.
   - `table, thead, tbody, th, td, tr { display: block; }`: This rule changes the display property of the table, table header, table body, table header cells, table data cells, and table rows to block, effectively stacking them vertically on smaller screens.
   - `thead tr { position: absolute; top: -9999px; left: -9999px; }`: This rule positions the table header row absolutely and moves it out of the viewport, effectively hiding it on smaller screens.
   - `tr { margin-bottom: 15px; }`: This rule adds a margin at the bottom of each table row to create separation between the rows.
   - `td { border: none; position: relative; padding-left: 50%; }`: This rule removes the border from table data cells, sets their position to relative, and adds left padding to create space for the content.
   - `td:before { ... }`: These rules use pseudo-elements to add content before each table data cell, effectively labeling the content within the cells for better readability on smaller screens.

The search results provide additional context and examples related to creating full-width and responsive tables using CSS. They offer insights into using percentage-based widths, media queries, and best practices for creating visually appealing and responsive tables.

Overall, the CSS code and the associated search results align with best practices for creating responsive and visually appealing tables in HTML and CSS, providing valuable guidance for web developers. */
